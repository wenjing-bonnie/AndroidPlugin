
plugins {
    id 'com.android.application'
    //TODO 暂时隐藏学习的时候创建的第一个插件，使用wjplugin添加一个有具体功能的插件
    //id 'com.wj.firstplugin'
    //id 'global.gradle'
    id 'com.android.wj.debug'
    id 'com.wj.plugin.manifest'
    id 'com.mob.sdk'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.android.androidplugin"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
//特色产品:同一套代码生产出不同特色的产品
    flavorDimensions "channel"
    productFlavors {

        huawei {
            manifestPlaceholders = [CHANNEL: "huawei"]
            dimension = "channel"
            buildConfigField("String", "CHANNEL", "\"huawei\"")
        }

        oppo {
            manifestPlaceholders = [CHANNEL: "oppo"]
            dimension = "channel"
            buildConfigField("String", "CHANNEL", "\"oppo\"")
        }

        xiaomi {
            manifestPlaceholders = [CHANNEL: "xiaomi"]
            dimension = "channel"
            buildConfigField("String", "CHANNEL", "\"xiaomi\"")
        }
    }
}

def prefix = "@@@@@@@@@@@@@@ app @@@@@@@@@@@@@   "


/*this.afterEvaluate {
    //当前variant的类型为application类型
    this.android.applicationVariants.all { ApplicationVariant variant ->
        println(prefix + "name = " + variant.name)
        //得到每个variant中的task，然后进行对Task进行hook
        variant.getAssembleProvider().get().doFirst {
            println(prefix + " assemble task do first ")
        }
        //修改每个variant的输出的apk的名字
        variant.outputs.all { // output ->
            println(prefix + "name  = " + outputFileName)
            String newApk = "app-${variant.baseName}-${variant.versionName}.apk"
            println(prefix + "newApkName = " + newApk)
            //outputFileName = newApk
        }

    }
}*/

//自定义Task
task firstTask {
    //创建一个Action，添加到Action列表的头部
    doFirst {
        println(prefix + "firstTask do first")
    }
//    println(prefix + "firstTask ")
    //创建一个Action，添加到Action列表到尾部
//    doLast {
//        println(prefix + "firstTask do last")
//    }
}

task("secondTask") {
    //   println(prefix + "secondTask by (string) ")
}

task(thirdTask) {
//    println(prefix + "thirdTask by () ")
}

//可以设置thirdTask是否执行
//thirdTask.enabled true

//方法一：在该project配置完成之后，在preBuild之前添加这些自定义的Task
//this.afterEvaluate {
//    getTasks().matching {
//        it.name.equals("preBuild")
//    }.each {
//        it.dependsOn(firstTask, secondTask, thirdTask)
//    }
//}
//方法二：直接从tasks的找到preBuild这个task即可
tasks.preBuild.dependsOn(firstTask, secondTask, thirdTask)

//TODO 暂时隐藏学习的时候创建的第一个插件，使用wjplugin添加一个有具体功能的插件
//自定义firstplugin插件中的输入属性的设置
/*templateSettingExtension {
    compileSdk = "1.0.0"
    interfaceSourceDir = file("src/main/java/mvp")
}
templateSettingExtensionInProject {
    compileSdk = "1.0.0"
    interfaceSourceDir = file("src/main/java/mvp")
}

//自定义firstplugin插件多层闭包的属性扩展
androidExtension {
    compileSdkVersion = "1.0.0"
    buildToolsVersion = "29.0.0"

    defaultConfig {
        applicationId = "1.0.0"
        //minSdkVersion = "3.0.0"
    }

    buildTypes {
        dev {
            //A problem occurred evaluating project ':app'.
            //> No signature of method: build_dwrb2icq269nomqcc24dytwa1.androidExtension() is applicable for argument types: (build_dwrb2icq269nomqcc24dytwa1$_run_closure7) values: [build_dwrb2icq269nomqcc24dytwa1$_run_closure7@4ddf3c7]
            //signingConfig  false
            signingConfig = true
        }

    }
}*/

configurations {
    firstConfiguration {
        description("This is the first configuration")

    }
}
dependencies {

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    firstConfiguration 'androidx.appcompat:appcompat:1.2.0'
}
