import com.wj.plugin.task.HandleTemplateTask

apply plugin: 'groovy'
apply plugin: 'maven'
/**项目依赖*/
dependencies {
    //gradle sdk
    implementation gradleApi()
    //groovy sdk
    implementation localGroovy()
}

repositories {
    mavenCentral()
    //maven{ url'http://maven.aliyun.com/nexus/content/repositories/jcenter'}
}

/**项目自定义实现具体功能的Task*/
def prefix = "%%%%%%%%% FirstPluginProject %%%%%%%%%  "

/**若增加HandleTemplateTask出现编译不通过的时候，需要删除plugins/里面的内容之后，重新编译该项目然后uploadArchives
 * 最后在将该依赖添加到root project中*/
task handleTemplateTask(type: HandleTemplateTask) {
    //必须设置input，否则会抛出"No value has been specified for property"
    setFileSourceDir(file("src/main/java/test.java"))
    setFileFormat(".java")
    doLast {
        println prefix + " The HandleTemplateTask is finished !!! "
        println prefix + getFileFormat()
    }
    doFirst {
        println prefix + " The HandleTemplateTask do first !!! "
    }
}


/**将自定义的的Task添加到依赖关系图中，必须保证该Task的input和output已经设置并且还设置类型一致，
 * 否则会抛出"No value has been specified for property"
 * 遇到这种情况就是将root project中的com.wj.firstplugin的依赖去掉之后，重新编译项目，成功之后重新打包上传，
 * 然后在root project在引入该插件
 * */
tasks.compileJava.dependsOn(handleTemplateTask)


/**将项目打包给到其他module使用*/

/**(方法一)：打包成Jar包的方式 */
def marvenjar = 'mavenjar'

/**默认名字是 [archiveBaseName]-[archiveAppendix]-[archiveVersion]-[archiveClassifier].[archiveExtension]*/
task makeJar(type: org.gradle.jvm.tasks.Jar) {
    //删除之前创建的文件夹
    delete marvenjar
    archiveBaseName = "firstplugin"
    archiveAppendix = "appendix"
    //为什么不起作用呢？？
    archiveVersion = '1.0.0'
    archiveClassifier = 'classifiter'
    //扩展名，默认的为jar
    //archiveExtension = "extension"
    doLast {
        println prefix + " The task of make jar is finished !!!"
    }
}

artifacts {
    //将firstPluginJar看做artifact，交给archives管理
    archives makeJar
}

uploadArchives {
    repositories {
        maven {
            //在build.gradle的同级目录下生成mavenjar文件夹
            url "file:" + marvenjar
        }
    }
}

/**=== (方法二)： 生成maven依赖库 */
uploadArchives {
    repositories {
        //delete '../plugins'
        mavenDeployer {
            //配置自定义插件的classpath
            pom.groupId = 'com.wj.plugin'
            pom.artifactId = 'firstplugin'
            pom.version = '1.0.0'

            //提交到远程服务器
            // repository(url:"服务器地址"){
            //    authentication(userName:'admin',password:'admin')
            // }

            //本地maven
            repository(url: uri('../plugins'))
        }
    }
}

